<?php
// $Id$
 
/*
* Implementation of hook_nodeapi
*/
 
//create default webform fields.  This array shows up backwards on a print_r..donno why.
function ms_event_registration_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
  	case 'presave':
  	case 'insert':
  		if ($node->type == 'event_form') {
  			$node->webform['components'] = array(
  				1 => array(
  					'nid' => $node->nid,
  					'cid' => 1,
  					'form_key' => 'quantity',
  					'name' => 'Quantity',
  					'type' => 'textfield',
  					'value' => 1,
  					'mandatory' => 1,
  				), //end 1  			
  			
  			2 => array(
  				'nid' => $node->nid,
  				'cid' => 2,
  				'form_key' => 'payment_status',
  				'name' => 'Payment Status',
  				'type' => 'select',
  				'value' => 'unpaid',		
  				'extra' => array(
  					'items' => 'paid|Paid
unpaid|Unpaid',
  					'multiple' => 0,		
  				),	//extra
  				'mandatory' => 1,
  				), //end 2
  			); //end node->webform
  	break;
		}; //end if
  	case 'update':
  	case 'view':

  } //endswitch 
} //endfunction

 
 
/*
* Implementation of hook_form_alter
*/

function ms_event_registration_form_alter(&$form, $form_state, $form_id) {
	
	//load the node
	$node = node_load(arg(1));
	//Check if it's a paid event as opposed to other types of products
	if($node->type == 'paidevent') {
		//make sure its the add to cart form
		if(strpos($form_id, 'add_to_cart_form')) {
			//remove the submit button because webform does the submitting
			unset($form['submit']);
			//remove attributes since no one should ever see them
			unset($form['attributes']);				
		}
	}

	//redirect the webform submit button.
		//Need to add an if statement once content type is decided so it doesnt affect all webforms.
		if (substr($form_id, 0, 20) == 'webform_client_form_') {
	
			//Hide the Payment Status for everyone.  Admins can still see the result in the webform results.
			unset($form['submitted']['payment_status']);

			// Add the submit handler after the existing Webform submit handler
			$form['#submit'][] = 'ms_event_registration_client_submit';
			//change the submit button title
			$form['actions']['submit']['#value'] = 'Checkout';	
			//add validation to be used on quantity field
			$form['#validate'][] = 'ms_event_registration_validate_number';

    }
}

/**
	* Element Validator for Quantity, making sure it's a numeric entry
 	*/
function ms_event_registration_validate_number($form_values) {
  if ($form_values['submitted_tree']['quantity'] !== is_numeric($form_values['submitted_tree']['quantity'])) {
    form_set_error(' ', t('You have not entered a valid quantity.'));
  }
}

/**
	* Submit handler for event registration webforms
 	*/
	function ms_event_registration_client_submit(&$form, &$form_state) {
		
		//load the webform node
		$node = node_load(arg(1));
		
		//get the quantity of registrations they want from the webform
		$quantity = $form_state['values']['submitted_tree']['quantity'];
		
		//empty anything in the cart because I'm lazy
		uc_cart_empty(uc_cart_get_id());
		
		//tell user we just emptied their cart and then laugh at their dismayed reaction
		drupal_set_message('Your shopping cart has been emptied except for this event registration. Please complete this registration before adding anything else to your shopping cart.');
		
		//add quantity of registrations to cart based on node ref and webform quantity with sid as attribute
			//define the attribute to modify
			$att_title = 'submission_id';
			//use SID as the attribute so we can grab it later and mark webform as complete
			$att_name = $form_state['values']['details']['sid'];
			//create attributes array
			$attributes = array( 'attributes' => array( $att_title => $att_name  ) );
		
		//add it to the cart
		uc_cart_add_item($node->field_event_ref[0]['nid'], $quantity, $attributes);
		
		//redirect to checkout after submission
		$form_state['redirect'] = 'cart/checkout';

		
		
}

/**
	* Create a conditional action to mark as paid after checkout  DOESNT WORK, but needs to!
 	*/

function ms_event_registration_ca_action() {
  $order_arg = array(
    '#entity' => 'ms_event_registration',
    '#title' => t('Mark as Paid'),
  );

 
$actions['ms_event_registration_mark_paid'] = array(
    '#title' => t('Mark Webform as Paid after Checkout'),
    '#category' => t('Mustardseed'),
    '#callback' => 'ms_event_registration_mark_paid',
    '#arguments' => array(
      'order' => $order_arg,
    ),
  );
  
  return $actions;
  }
  
// Mark a webform as paid
function ms_event_registration_mark_paid(&$order) {
	$sid = $order->products[0]->data['attributes']['submission_id'];
	$value = db_query("UPDATE {webform_submitted_data} SET data = '%s' WHERE cid = %d AND sid = %d", paid, 2, $sid);
	return $value;
} 