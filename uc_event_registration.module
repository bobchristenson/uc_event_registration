<?php

require_once('uc_event_registration_ca.inc');

/*
* Implementation of hook_nodeapi
* create default webform fields.  This array shows up backwards on a print_r..donno why.
*/
function uc_event_registration_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'presave':
    case 'insert':
      if (!$node->nid && $node->type == 'paidevent') {
        // If we used clone.module to get here then $node->webform['components']
        // already has valid data (including, presumably, uc_event_quantity and status).
        
        if (!is_array($node->webform['components'])) {
          $node->webform['components'] = array();
        }
        
        if (!uc_event_registration_has_form_comp( 'uc_event_quantity',
          $node->webform['components'])) {
            uc_event_registration_add_form_comp($node->webform['components'],
              array(
                'nid' => $node->nid,
                'form_key' => 'uc_event_quantity',
                'name' => 'Quantity',
                'type' => 'textfield',
                'value' => 1,
                'mandatory' => 1,
              )
            ); //end 1
          }
      if (!uc_event_registration_has_form_comp( 'uc_event_payment_status',
        $node->webform['components'])) {
          uc_event_registration_add_form_comp($node->webform['components'],
            array(
              'nid' => $node->nid,
              'form_key' => 'uc_event_payment_status',
              'name' => 'Payment Status',
              'type' => 'select',
              'value' => 'unpaid',    
              'extra' => array(
                'items' =>  "paid|Paid\r\n" .
                'unpaid|Unpaid',
                'multiple' => 0,
              ),  //extra
              'mandatory' => 1,
            )
          ); //end 2
        }
    }
    
    break;
    case 'update':
    case 'view':

  } //endswitch 
} //endfunction

/**
  * Determines if the needle component exists in the components array.
  * 
  * @param $needle The webforms form_key to search for
  * @param $haystack The components array to search through
  */
  function uc_event_registration_has_form_comp($needle, $haystack) {
    foreach ($haystack as $key => $value) {
      if (is_array($value) && $value['form_key'] === $needle)
      return TRUE;
    }
    return FALSE;
  }

/**
  * Adds a webform component to an existing array of components. It caches the
  * next cid to use so it can't be intermixed with manual inserts, and you can't
  * call it on different component arrays.
  * 
  * @param $new_comp Component to add. If it has a cid that will be overwritten.
  * @param $comp_array Component array to append to.
  */
  function uc_event_registration_add_form_comp(&$comp_array, $new_comp) {
    static $next_cid;
    
    if (!isset($next_cid)) {
      $next_cid = 1;
      foreach ($comp_array as $key => $comp) {
        if ($comp['cid'] >= $next_cid) {
          $next_cid = $comp['cid'] + 1;
        }
      }
    } 
  $new_comp['cid'] = $next_cid;
  $next_cid += 1;
  $comp_array[] = $new_comp; 
}


/*
* Implementation of hook_form_alter
*/
function uc_event_registration_form_alter(&$form, &$form_state, $form_id) {
  //Check if it's a paid event form
  //first check is add to cart, second is webform
  if($form['node']['#value']->type == 'paidevent' || $form['#node']->type == 'paidevent') { 
    //target the add to cart form
    if(strpos($form_id, 'add_to_cart_form')) {
      //remove the submit button because webform does the submitting
      unset($form['submit']);
      //remove attributes since no one should ever see them
      unset($form['attributes']);        
    }//add to cart form

    //target the included webform
    if (substr($form_id, 0, 20) == 'webform_client_form_') {
      //Hide the Payment Status for everyone.
      //Admins can still see the result in the webform results.
      $form['submitted']['uc_event_payment_status']['#access'] = 0;     
      // Add the submit handler after the existing Webform submit handler
      $form['#submit'][] = 'uc_event_registration_client_submit';
      //add validation to be used on uc_event_quantity field
      $form['#validate'][] = 'uc_event_registration_validate_number';      

      //if the stock module is enabled and stock is zero, turn off the webform
      if(module_exists('uc_stock')) {
        $stock = uc_stock_level($form['#node']->model);
        if($stock !== FALSE && $stock <= 0) {
          $form['submitted']['#access'] = 0;
          $form['actions']['submit']['#access'] = 0;      
          //I'd like to give a message, below, but it prints twice.  Anyone? Bueller?
          //drupal_set_message('Sorry, this event has sold out!');
        } //stock check
      } //module_exists
    }//webform_client_form
  }//type is paidevent 
}//form_alter


/**
  * Element Validator for uc_event_quantity, making sure it's a numeric entry
  */
function uc_event_registration_validate_number($form_values) {
  $value = $form_values['submitted']['uc_event_quantity']['#value'];
  if (!is_numeric($value) || ($value <= 0)) {
    form_set_error('uc_event_quantity', t('You have not entered a valid uc_event_quantity.'));
  }//end numeric check
  if(module_exists('uc_stock')) {
    $stock = uc_stock_level($form_values['#node']->model);
    if($stock !== FALSE && $stock < $value) {
      form_set_error('uc_event_quantity', t('Sorry, but your uc_event_quantity chosen exceeds the remaining number of tickets.  There are currently @stock tickets remaining. Please try purchasing fewer.', array('@stock' => $stock)), $reset = FALSE);      
    }//stock_level
  }//module_exists
}//end validation

/**
  * Submit handler for event registration webforms
  */
function uc_event_registration_client_submit(&$form, &$form_state) {
    
  //load the webform node
  $node = node_load(arg(1));
    
  //get the uc_event_quantity of registrations they want from the webform
  $uc_event_quantity = $form_state['values']['submitted_tree']['uc_event_quantity'];
    
  //add uc_event_quantity of registrations to cart based on
  //node ref and webform uc_event_quantity with sid as attribute
  
  //define the attribute to modify
  $att_title = 'submission_id';
  //use SID as the attribute so we can grab it later and mark webform as complete
  $att_name = $form_state['values']['details']['sid'];
  //create attributes array
  $attributes = array( 'attributes' => array( $att_title => $att_name  ) );
     
  //add it to the cart
  uc_cart_add_item($node->nid, $uc_event_quantity, $attributes);
  
  //redirect to checkout
  $form_state['redirect'] = 'cart/checkout';
}//end submit function