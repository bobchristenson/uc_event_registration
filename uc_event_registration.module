<?php
// $Id$

require_once('uc_event_registration_ca.inc');

/*
* Implementation of hook_nodeapi
* create default webform fields.  This array shows up backwards on a print_r..donno why.
*/
function uc_event_registration_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'presave':
    case 'insert':
      if (!$node->nid && $node->type == 'paidevent') {
      // If we used clone.module to get here then $node->webform['components']
      // already has valid data (including, presumably, quantity and status).

      if (!uc_event_registration_has_form_component('uc_event_payment_status', $node->webform['components'])) {
        array_unshift($node->webforms['components'], array(
          'nid' => $node->nid,
          'cid' => 2,
          'form_key' => 'uc_event_payment_status',
          'name' => 'Payment Status',
          'type' => 'select',
          'value' => 'unpaid',    
          'extra' => array(
            'items' => 'paid|Paid
unpaid|Unpaid',
            'multiple' => 0,
          ),  //extra
          'mandatory' => 1,
        )); //end 2
      }

      if (!uc_event_registration_has_form_component('uc_event_quantity', $node->webform['components'])) {
        array_unshift($node->webform['components'], array(
          'nid' => $node->nid,
          'cid' => 1,
          'form_key' => 'uc_event_quantity',
          'name' => 'Quantity',
          'type' => 'textfield',
          'value' => 1,
          'mandatory' => 1,
        )); //end 1        
      }
    }

    break;
    case 'update':
    case 'view':

  } //endswitch 
} //endfunction

/**
 * Determines if the needle component exists in the components array.
 * @param $needle The webforms form_key to search for
 * @param $haystack The components array to search through
 */
function uc_event_registration_has_form_component($needle, $haystack) {
  foreach ($haystack as $key => $value) {
    if (is_array($value) && $value['form_key'] === $needle)
      return TRUE;
  }
  return FALSE;
}

/*
* Implementation of hook_form_alter
*/
function uc_event_registration_form_alter(&$form, $form_state, $form_id) {
  //Check if it's a paid event form
  //first check is add to cart, second is webform
  if($form['node']['#value']->type == 'paidevent' || $form['#node']->type == 'paidevent') { 
    //target the add to cart form
    if(strpos($form_id, 'add_to_cart_form')) {
      //remove the submit button because webform does the submitting
      unset($form['submit']);
      //remove attributes since no one should ever see them
     unset($form['attributes']); 

                   
    }//add to cart form

    //target the included webform
    if (substr($form_id, 0, 20) == 'webform_client_form_') {
      //Hide the Payment Status for everyone.
      //Admins can still see the result in the webform results.
      $form['submitted']['uc_event_payment_status']['#access'] = 0;     
      // Add the submit handler after the existing Webform submit handler
      $form['#submit'][] = 'uc_event_registration_client_submit';
      //add validation to be used on quantity field
      $form['#validate'][] = 'uc_event_registration_validate_number';        

      //if the stock module is enabled and stock is zero, turn off the webform
      if(module_exists('uc_stock')) {
        $stock = uc_stock_level($form['#node']->model);
        if($stock !== FALSE && $stock <= 0) {
          $form['submitted']['#access'] = 0;
          $form['actions']['submit']['#access'] = 0;      
          //Tell people theyre outta luck
          drupal_set_message('Sorry, this event has sold out!');
        } //stock check
      } //module_exists
    }//webform_client_form
  }//type is paidevent 
}//form_alter


/**
  * Element Validator for Quantity, making sure it's a numeric entry
  */
function uc_event_registration_validate_number($form_values) {
  $value = $form_values['submitted']['uc_event_quantity']['#value'];
  if (!is_numeric($value) || ($value <= 0)) {
    form_set_error('uc_event_quantity', t('You have not entered a valid quantity.'));
  }//end numeric check
  
  //validate that theres stock if using it
  if(module_exists('uc_stock')) {
    $stock = uc_stock_level($form_values['#node']->model);
    if($stock !== FALSE && $stock < $value) {
      form_set_error('uc_event_quantity', t('Sorry, but your quantity chosen exceeds the remaining number of tickets.  There are currently @stock tickets remaining. Please try purchasing fewer.', array('@stock' => $stock)), $reset = FALSE);      
    }//stock_level
  }//module_exists
}//end validation

/**
  * Submit handler for event registration webforms
  */
function uc_event_registration_client_submit(&$form, $form_state) {
    
  //get the node
  $node = $form['#node'];
    
  //get the quantity of registrations they want from the webform
  $quantity = $form_state['values']['submitted_tree']['uc_event_quantity'];
  
  //create the attributes array
  $sid = $form_state['values']['details']['sid'];
  
  $data['submission_id'] = $sid;
  
  //add it to the cart
  uc_cart_add_item($node->nid, $quantity, $data);
  
  //redirect to checkout
  $form_state['redirect'] = 'cart/checkout';
}//end submit function