<?php
// $Id$

require_once('uc_event_registration_ca.inc');

/*
* Implementation of hook_nodeapi
* create default webform fields.  This array shows up backwards on a print_r..donno why.
*/
function uc_event_registration_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'presave':
    case 'insert':
      if ($node->nid == NULL && $node->type == 'paidevent') {
        $node->webform['components'] = array(
          1 => array(
            'nid' => $node->nid,
            'cid' => 1,
            'form_key' => 'quantity',
            'name' => 'Quantity',
            'type' => 'textfield',
            'value' => 1,
            'mandatory' => 1,
          ), //end 1        
        
        2 => array(
          'nid' => $node->nid,
          'cid' => 2,
          'form_key' => 'payment_status',
          'name' => 'Payment Status',
          'type' => 'select',
          'value' => 'unpaid',    
          'extra' => array(
            'items' => 'paid|Paid
unpaid|Unpaid',
            'multiple' => 0,    
          ),  //extra
          'mandatory' => 1,
          ), //end 2
        ); //end node->webform
    break;
    }; //end if
    case 'update':
    case 'view':

  } //endswitch 
} //endfunction

 
 
/*
* Implementation of hook_form_alter
*/
function uc_event_registration_form_alter(&$form, $form_state, $form_id) {
  
  //load the node
  $node = node_load(arg(1));
  //Check if it's a paid event as opposed to other types of products
  if($node->type == 'paidevent') {
    //make sure its the add to cart form
    if(strpos($form_id, 'add_to_cart_form')) {
      //remove the submit button because webform does the submitting
      unset($form['submit']);
      //remove attributes since no one should ever see them
      unset($form['attributes']);        
    }
  }

  //make sure its our paid event node
  if($form['#node']->type == 'paidevent') {
      
    if (substr($form_id, 0, 20) == 'webform_client_form_') {

      //Hide the Payment Status for everyone.  Admins can still see the result in the webform results.
      $form['submitted']['payment_status']['#access'] = FALSE;
      
      // Add the submit handler after the existing Webform submit handler
      $form['#submit'][] = 'uc_event_registration_client_submit';

      //add validation to be used on quantity field
      $form['#validate'][] = 'uc_event_registration_validate_number';  
    }
  }
}

/**
  * Element Validator for Quantity, making sure it's a numeric entry
  */
function uc_event_registration_validate_number($form_values) {
  $value = $form_values['submitted']['quantity']['#value'];
  if (!is_numeric($value) || ($value <= 0)) {
    form_set_error('', t('You have not entered a valid quantity.'));
  }
}

/**
  * Submit handler for event registration webforms
  */
  function uc_event_registration_client_submit(&$form, &$form_state) {
    
    //load the webform node
    $node = node_load(arg(1));
    
    //get the quantity of registrations they want from the webform
    $quantity = $form_state['values']['submitted_tree']['quantity'];
    
    //add quantity of registrations to cart based on node ref and webform quantity with sid as attribute
      //define the attribute to modify
      $att_title = 'submission_id';
      //use SID as the attribute so we can grab it later and mark webform as complete
      $att_name = $form_state['values']['details']['sid'];
      //create attributes array
      $attributes = array( 'attributes' => array( $att_title => $att_name  ) );
    
    //add it to the cart
    uc_cart_add_item($node->nid, $quantity, $attributes);
    
    //redirect to checkout after submission
    $form_state['redirect'] = 'cart/checkout';

    
    
}